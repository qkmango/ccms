<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.qkmango.ccms.mvc.dao.TeachDao">

    <select id="count" resultType="int">
        SELECT FOUND_ROWS()
    </select>

    <update id="updateFaculty">
        UPDATE t_faculty
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="updateSpecialty">
        UPDATE t_specialty
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="updateClazz">
        UPDATE t_clazz
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteFaculty">
        delete
        from t_faculty
        where id = #{id}
    </delete>

    <delete id="deleteSpecialty">
        delete
        from t_specialty
        where id = #{id}
    </delete>

    <delete id="deleteClazz">
        DELETE
        FROM t_clazz
        WHERE id = #{id}
    </delete>

    <select id="listFaculty" resultType="cn.qkmango.ccms.domain.entity.Faculty">
        select SQL_CALC_FOUND_ROWS
        id, name, description
        from t_faculty
        <if test="param != null">
            <where>
                <if test="param.id != null">
                    id = #{param.id}
                </if>
                <if test="param.name != null">
                    and name like concat('%',#{param.name},'%')
                </if>
            </where>
        </if>
        order by id desc
        LIMIT #{skipCount},#{limit}
    </select>

    <select id="detailFaculty" resultType="cn.qkmango.ccms.domain.entity.Faculty">
        select id, name, description
        from t_faculty
        where id = #{id}
    </select>

    <select id="listSpecialty" resultType="cn.qkmango.ccms.domain.vo.SpecialtyVO">
        select SQL_CALC_FOUND_ROWS
        s.id,
        s.name,
        s.description,
        f.name as facultyName
        from t_specialty s
        left join t_faculty f on s.faculty = f.id
        <if test="param != null">
            <where>
                <if test="param.id != null">
                    s.id = #{param.id}
                </if>
                <if test="param.name != null">
                    and s.name like concat('%',#{param.name},'%')
                </if>
                <if test="param.faculty != null">
                    and s.faculty = #{param.faculty}
                </if>
            </where>
        </if>
        order by s.id desc
        LIMIT #{skipCount},#{limit}
    </select>

    <select id="detailSpecialty" resultType="cn.qkmango.ccms.domain.vo.SpecialtyVO">
        select s.id          as id,
               s.name        as name,
               s.description as description,
               f.name        as facultyName

        from t_specialty s
                 left join t_faculty f on s.faculty = f.id
        where s.id = #{id}
    </select>

    <select id="listClazz" resultMap="ClazzVO">
        select SQL_CALC_FOUND_ROWS
            c.id as clazzId,
            c.name as clazzName,
            c.specialty as clazzSpecialty,
            c.grade as clazzGrade,
            c.description as clazzDescription,
            s.name as specialtyName,
            f.name as facultyName
        from
            (select id, name, description from t_faculty
                <if test="param != null"><where>
                    <if test="param.faculty != null">id = #{param.faculty}</if>
                </where></if>) f,
            (select id, name, description, faculty from t_specialty
                <if test="param != null"><where>
                    <if test="param.specialty != null">id = #{param.specialty}</if>
                    <if test="param.faculty != null">and faculty = #{param.faculty}</if>
                </where></if>) s,
            (select id, name, specialty, grade, description from t_clazz
                <if test="param != null"><where>
                    <if test="param.id != null">id = #{param.id}</if>
                    <if test="param.specialty != null">and specialty = #{param.specialty}</if>
                    <if test="param.grade != null">and grade = #{param.grade}</if>
                    <if test="param.name != null">and name like concat('%',#{param.name},'%')</if>
                </where></if>) c
        where c.specialty = s.id and s.faculty = f.id
        order by c.id desc
        LIMIT #{skipCount},#{limit}
    </select>

    <select id="detailClazz" resultMap="ClazzVO">
        select c.id          as clazzId,
               c.name        as clazzName,
               c.specialty   as clazzSpecialty,
               c.grade       as clazzGrade,
               c.description as clazzDescription,

               s.id          as specialtyId,
               s.name        as specialtyName,
               s.faculty     as specialtyFaculty,

               f.id          as facultyId,
               f.name        as facultyName,
               f.description as facultyDescription
        from t_clazz c
                 left join t_specialty s on s.id = c.specialty
                 left join t_faculty f on f.id = s.faculty
        where c.id = ${id}
    </select>

    <insert id="insertFaculty">
        insert into t_faculty (name, description)
        values (#{name}, #{description})
    </insert>

    <insert id="insertSpecialty">
        INSERT INTO t_specialty (name, description, faculty)
        values (#{name}, #{description}, #{faculty})
    </insert>

    <insert id="insertClazz">
        INSERT INTO t_clazz(name, specialty, grade, description)
        VALUES (#{name}, #{specialty}, #{grade}, #{description})
    </insert>


    <resultMap id="ClazzVO" type="cn.qkmango.ccms.domain.vo.ClazzVO">
        <association property="clazz" javaType="cn.qkmango.ccms.domain.entity.Clazz">
            <id property="id" column="clazzId"/>
            <result property="name" column="clazzName"/>
            <result property="specialty" column="clazzSpecialty"/>
            <result property="grade" column="clazzGrade"/>
            <result property="description" column="clazzDescription"/>
        </association>
        <association property="specialty" javaType="cn.qkmango.ccms.domain.entity.Specialty">
            <id property="id" column="specialtyId"/>
            <result property="name" column="specialtyName"/>
            <result property="description" column="specialtyDescription"/>
            <result property="faculty" column="specialtyFaculty"/>
        </association>
        <association property="faculty" javaType="cn.qkmango.ccms.domain.entity.Faculty">
            <id property="id" column="facultyId"/>
            <result property="name" column="facultyName"/>
            <result property="description" column="facultyDescription"/>
        </association>
    </resultMap>

</mapper>
