<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.qkmango.ccms.mvc.dao.RecordDao">
    <select id="count" resultType="int">
        SELECT FOUND_ROWS()
    </select>

    <select id="countBy" resultType="java.lang.Integer">
        select count(*) from t_record
        <where>
            <if test="id != null and id != ''">
                id = #{id}
            </if>
            <if test="payment != null and payment != ''">
                AND payment = #{payment}
            </if>
            <if test="user != null and user != ''">
                AND user = #{user}
            </if>
            <if test="state != null">
                AND state = #{state}
            </if>
            <if test="startCreateTime != null">
                AND createTime &gt;= #{startCreateTime}
            </if>
            <if test="endCreateTime != null">
                AND createTime &lt;= #{endCreateTime}
            </if>
        </where>
    </select>

    <insert id="insert">
        INSERT INTO t_record(payment, user, state)
        VALUES (#{payment}, #{user}, #{state})
    </insert>

    <select id="list" resultMap="RecordVO">
        select SQL_CALC_FOUND_ROWS
        r.id            as recordId,
        r.payment       as recordPayment,
        r.user          as recordUser,
        r.state         as recordState,
        r.createTime    as recordCreateTime,
        p.id            as paymentId,
        p.title         as paymentTitle,
        p.type          as paymentType,
        p.price         as paymentPrice,
        p.description   as paymentDescription,
        p.author        as paymentAuthor,
        p.createTime    as paymentCreateTime,
        p.startTime     as paymentStartTime,
        p.endTime       as paymentEndTime,
        p.state         as paymentState
        from
        (select id, payment, user, state, createTime from t_record
        <if test="param != null">
            <if test="param.record != null">
                <where>
                    <if test="param.record.id != null and param.record.id != ''">
                        id = #{param.record.id}
                    </if>
                    <if test="param.record.user != null and param.record.user != ''">
                        and user = #{param.record.user}
                    </if>
                    <if test="param.record.state != null">
                        and state = #{param.record.state}
                    </if>
                    <if test="param.record.startCreateTime != null">
                        and createTime &gt;= #{param.record.startCreateTime}
                    </if>
                    <if test="param.record.endCreateTime != null">
                        and createTime &lt;= #{param.record.endCreateTime}
                    </if>
                    <if test="param.payment != null">
                        <if test="param.payment.id != null and param.payment.id != ''">
                            and payment = #{param.payment.id}
                        </if>
                    </if>
                </where>
            </if>
        </if>
        ) as r,

        (select id,title,type,price,description,author,createTime,startTime,endTime,state
        from t_payment
        <if test="param != null">
            <if test="param.payment != null">
                <where>
                    <if test="param.payment.id != null and param.payment.id != ''">
                        id = #{param.payment.id}
                    </if>
                    <if test="param.payment.title != null and param.payment.title != ''">
                        and title like concat('%',#{param.payment.title},'%')
                    </if>
                    <if test="param.payment.state != null">
                        and state = #{param.payment.state}
                    </if>
                    <if test="param.payment.type != null">
                        and type = #{param.payment.type}
                    </if>
                    <if test="param.payment.startCreateTime != null">
                        and createTime &gt;= #{param.payment.startCreateTime}
                    </if>
                    <if test="param.payment.endCreateTime != null">
                        and createTime &lt;= #{param.payment.endCreateTime}
                    </if>
                    <if test="param.payment.startCreateTime != null">
                        and createTime &gt;= #{param.payment.startCreateTime}
                    </if>
                    <if test="param.payment.endCreateTime != null">
                        and createTime &lt;= #{param.payment.endCreateTime}
                    </if>
                </where>
            </if>
        </if>
        ) as p
        where r.payment = p.id
        order by p.createTime desc, r.id asc
        LIMIT #{skipCount},#{limit}
    </select>

    <resultMap id="RecordVO" type="cn.qkmango.ccms.domain.vo.RecordVO">
        <association property="record">
            <id property="id" column="recordId"/>
            <result property="payment" column="recordPayment"/>
            <result property="user" column="recordUser"/>
            <result property="state" column="recordState"/>
            <result property="createTime" column="recordCreateTime"/>
        </association>
        <association property="payment">
            <id property="id" column="paymentId"/>
            <result property="title" column="paymentTitle"/>
            <result property="type" column="paymentType"/>
            <result property="description" column="paymentDescription"/>
            <result property="createTime" column="paymentCreateTime"/>
            <result property="author" column="paymentAuthor"/>
            <result property="price" column="paymentPrice"/>
            <result property="startTime" column="paymentStartTime"/>
            <result property="endTime" column="paymentEndTime"/>
            <result property="state" column="paymentState"/>
        </association>
    </resultMap>

    <update id="refund">
        update t_record
        set state = 'REFUNDED', createTime = null
        where id = #{id} and state = 'PAID'
    </update>

    <select id="baseById" resultType="cn.qkmango.ccms.domain.entity.Record">
        select id, payment, user, state, createTime
        from t_record
        where id = #{id}
    </select>

    <update id="toPayment">
        update t_record
        set state      = 'PAID',
            createTime = #{createTime}
        where id = #{id}
          and state in ('UNPAID', 'REFUNDED')
    </update>

    <delete id="delete">
        delete
        from t_record
        where id = #{id}
          and state in ('UNPAID', 'REFUNDED')
    </delete>

    <delete id="deleteByPayment">
        delete
        from t_record
        where payment = #{payment}
          and state in ('UNPAID', 'REFUNDED')
    </delete>


</mapper>
